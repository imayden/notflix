{
  "version": 3,
  "sources": ["browser-external:crypto", "../../../../../node_modules/jwt-simple/lib/jwt.js", "../../../../../node_modules/jwt-simple/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/*\n * jwt-simple\n *\n * JSON Web Token encode and decode module for node.js\n *\n * Copyright(c) 2011 Kazuhito Hokamura\n * MIT Licensed\n */\n\n/**\n * module dependencies\n */\nvar crypto = require('crypto');\n\n\n/**\n * support algorithm mapping\n */\nvar algorithmMap = {\n  HS256: 'sha256',\n  HS384: 'sha384',\n  HS512: 'sha512',\n  RS256: 'RSA-SHA256'\n};\n\n/**\n * Map algorithm to hmac or sign type, to determine which crypto function to use\n */\nvar typeMap = {\n  HS256: 'hmac',\n  HS384: 'hmac',\n  HS512: 'hmac',\n  RS256: 'sign'\n};\n\n\n/**\n * expose object\n */\nvar jwt = module.exports;\n\n\n/**\n * version\n */\njwt.version = '0.5.6';\n\n/**\n * Decode jwt\n *\n * @param {Object} token\n * @param {String} key\n * @param {Boolean} [noVerify]\n * @param {String} [algorithm]\n * @return {Object} payload\n * @api public\n */\njwt.decode = function jwt_decode(token, key, noVerify, algorithm) {\n  // check token\n  if (!token) {\n    throw new Error('No token supplied');\n  }\n  // check segments\n  var segments = token.split('.');\n  if (segments.length !== 3) {\n    throw new Error('Not enough or too many segments');\n  }\n\n  // All segment should be base64\n  var headerSeg = segments[0];\n  var payloadSeg = segments[1];\n  var signatureSeg = segments[2];\n\n  // base64 decode and parse JSON\n  var header = JSON.parse(base64urlDecode(headerSeg));\n  var payload = JSON.parse(base64urlDecode(payloadSeg));\n\n  if (!noVerify) {\n    if (!algorithm && /BEGIN( RSA)? PUBLIC KEY/.test(key.toString())) {\n      algorithm = 'RS256';\n    }\n\n    var signingMethod = algorithmMap[algorithm || header.alg];\n    var signingType = typeMap[algorithm || header.alg];\n    if (!signingMethod || !signingType) {\n      throw new Error('Algorithm not supported');\n    }\n\n    // verify signature. `sign` will return base64 string.\n    var signingInput = [headerSeg, payloadSeg].join('.');\n    if (!verify(signingInput, key, signingMethod, signingType, signatureSeg)) {\n      throw new Error('Signature verification failed');\n    }\n\n    // Support for nbf and exp claims.\n    // According to the RFC, they should be in seconds.\n    if (payload.nbf && Date.now() < payload.nbf*1000) {\n      throw new Error('Token not yet active');\n    }\n\n    if (payload.exp && Date.now() > payload.exp*1000) {\n      throw new Error('Token expired');\n    }\n  }\n\n  return payload;\n};\n\n\n/**\n * Encode jwt\n *\n * @param {Object} payload\n * @param {String} key\n * @param {String} algorithm\n * @param {Object} options\n * @return {String} token\n * @api public\n */\njwt.encode = function jwt_encode(payload, key, algorithm, options) {\n  // Check key\n  if (!key) {\n    throw new Error('Require key');\n  }\n\n  // Check algorithm, default is HS256\n  if (!algorithm) {\n    algorithm = 'HS256';\n  }\n\n  var signingMethod = algorithmMap[algorithm];\n  var signingType = typeMap[algorithm];\n  if (!signingMethod || !signingType) {\n    throw new Error('Algorithm not supported');\n  }\n\n  // header, typ is fixed value.\n  var header = { typ: 'JWT', alg: algorithm };\n  if (options && options.header) {\n    assignProperties(header, options.header);\n  }\n\n  // create segments, all segments should be base64 string\n  var segments = [];\n  segments.push(base64urlEncode(JSON.stringify(header)));\n  segments.push(base64urlEncode(JSON.stringify(payload)));\n  segments.push(sign(segments.join('.'), key, signingMethod, signingType));\n\n  return segments.join('.');\n};\n\n/**\n * private util functions\n */\n\nfunction assignProperties(dest, source) {\n  for (var attr in source) {\n    if (source.hasOwnProperty(attr)) {\n      dest[attr] = source[attr];\n    }\n  }\n}\n\nfunction verify(input, key, method, type, signature) {\n  if(type === \"hmac\") {\n    return (signature === sign(input, key, method, type));\n  }\n  else if(type == \"sign\") {\n    return crypto.createVerify(method)\n                 .update(input)\n                 .verify(key, base64urlUnescape(signature), 'base64');\n  }\n  else {\n    throw new Error('Algorithm type not recognized');\n  }\n}\n\nfunction sign(input, key, method, type) {\n  var base64str;\n  if(type === \"hmac\") {\n    base64str = crypto.createHmac(method, key).update(input).digest('base64');\n  }\n  else if(type == \"sign\") {\n    base64str = crypto.createSign(method).update(input).sign(key, 'base64');\n  }\n  else {\n    throw new Error('Algorithm type not recognized');\n  }\n\n  return base64urlEscape(base64str);\n}\n\nfunction base64urlDecode(str) {\n  return Buffer.from(base64urlUnescape(str), 'base64').toString();\n}\n\nfunction base64urlUnescape(str) {\n  str += new Array(5 - str.length % 4).join('=');\n  return str.replace(/\\-/g, '+').replace(/_/g, '/');\n}\n\nfunction base64urlEncode(str) {\n  return base64urlEscape(Buffer.from(str).toString('base64'));\n}\n\nfunction base64urlEscape(str) {\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n", "module.exports = require('./lib/jwt');\n"],
  "mappings": "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",
  "names": []
}
